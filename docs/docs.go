// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "license": {
            "name": "MIT",
            "url": "http://opensource.org/licenses/MIT"
        },
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/building": {
            "get": {
                "description": "Get a filtered list of buildings.",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Get Buildings",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Filter by city",
                        "name": "city",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by year",
                        "name": "year",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Filter by number of floors",
                        "name": "floors",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of buildings",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/github_com_acronix0_Building-service-Go_internal_dto.BuildingDTO"
                            }
                        }
                    },
                    "400": {
                        "description": "Invalid query parameters",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_v1.Response"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_v1.Response"
                        }
                    }
                }
            },
            "post": {
                "description": "Add a new building to the database.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Buildings"
                ],
                "summary": "Create Building",
                "parameters": [
                    {
                        "description": "Building details",
                        "name": "input",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/github_com_acronix0_Building-service-Go_internal_dto.CreateBuildingDTO"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Successfully created building",
                        "schema": {
                            "$ref": "#/definitions/github_com_acronix0_Building-service-Go_internal_dto.BuildingDTO"
                        }
                    },
                    "400": {
                        "description": "Invalid input data",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_v1.Response"
                        }
                    },
                    "500": {
                        "description": "Failed to add building",
                        "schema": {
                            "$ref": "#/definitions/internal_delivery_http_v1.Response"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "github_com_acronix0_Building-service-Go_internal_dto.BuildingDTO": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "floors": {
                    "type": "integer"
                },
                "id": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "github_com_acronix0_Building-service-Go_internal_dto.CreateBuildingDTO": {
            "type": "object",
            "properties": {
                "city": {
                    "type": "string"
                },
                "floors": {
                    "type": "integer"
                },
                "name": {
                    "type": "string"
                },
                "year": {
                    "type": "integer"
                }
            }
        },
        "internal_delivery_http_v1.Response": {
            "type": "object",
            "properties": {
                "message": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "1.0",
	Host:             "localhost:8080",
	BasePath:         "/api/v1",
	Schemes:          []string{},
	Title:            "Building API",
	Description:      "API for managing buildings.",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
